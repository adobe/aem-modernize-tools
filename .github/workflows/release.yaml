name: Tag & Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version
        required: false

jobs:
  tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    outputs:
      version: ${{ steps.store-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JDK
        uses: actions/setup-java@v2.3.0
        with:
          java-version: 11

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Release with Maven
        run: mvn -B release:clean release:prepare -DreleaseVersion=${{ github.event.inputs.version }}

      - name: Store Version
        id: store-version
        run: echo "::set-output name=version::$(grep ^scm.tag= release.properties | sed -e 's/scm.tag=aem-modernize-tools-//g')"

  github-release:
    needs: tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Work around for https://github.com/heinrichreimer/action-github-changelog-generator/issues/21
          ref: aem-modernize-tools-${{ needs.tag.outputs.version }}

      - name: Setup JDK
        uses: actions/setup-java@v2.3.0
        with:
          java-version: 11

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven Verify
        run: mvn -U clean verify && mvn verify -P java8

      - name: Generate Release Changelog
        id: generate-release-changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issues: true
          issuesWoLabels: true
          pullRequests: true
          prWoLabels: true
          author: true
          compareLink: true
          onlyLastTag: true
          stripHeaders: true
          stripGeneratorNotice: true

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: aem-modernize-tools-${{ needs.tag.outputs.version }}
          release_name: aem-modernize-tools-${{ needs.tag.outputs.version }}
          body: ${{ steps.generate-release-changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Artifacts
        id: upload-release-artifacts
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: aem-modernize-tools-${{ needs.tag.outputs.version }}
          files: |
            ./target/aem-modernize-tools-*.jar

  maven-central-deploy:
    needs: tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: aem-modernize-tools-${{ needs.tag.outputs.version }}

      # See https://github.com/actions/setup-java#publishing-using-apache-maven
      - name: Setup JDK
        uses: actions/setup-java@v2.3.0
        with:
          java-version: 11
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Import GPG key
        env:
          GPG_SECRET_KEYS: ${{ secrets.GPG_SECRET_KEYS }}
          GPG_OWNERTRUST: ${{ secrets.GPG_OWNERTRUST }}
        run: |
          echo $GPG_SECRET_KEYS | base64 --decode | gpg --import --no-tty --batch --yes
          echo $GPG_OWNERTRUST | base64 --decode | gpg --import-ownertrust --no-tty --batch --yes

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Java8 Artifact
        run: mvn clean package -P release,java8
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Publish to Apache Maven Central
        run: mvn deploy -P release,attach-javadoc,attach-source,attach-java8 -DautoReleaseAfterClose=true
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
